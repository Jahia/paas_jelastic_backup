---
actions:
  backupHaproxy:
    - cmd [${nodes.bl.first.id}]: |-
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        cp /etc/haproxy/haproxy.cfg.d/00-global.cfg haproxy-00-global.cfg
        gzip haproxy-00-global.cfg
        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f haproxy-00-global.cfg.gz ${globals.argTimestamp} -m ${settings.backtype} 2>>${globals.logsPath} || exit 1
        rm -f haproxy-00-global.cfg.gz
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during haproxy backup."

  restoreHaproxy:
    - cmd [bl]: |-
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        python3 backrest.py -a download --backupname ${settings.backup_name} --bucketname ${globals.bucketname} -m ${settings.backtype} -t ${settings.timestamp} -f haproxy-00-global.cfg.gz 2>>${globals.logsPath} || exit 1
        ls haproxy-00-global.cfg.gz || exit 0
    - if ("${response.errOut}" == ""):
        restoreHaproxyIfWorkaround:
    - else:
        log: "No haproxy configuration backup available"

  restoreHaproxyIfWorkaround:
    - cmd [bl]: |-
        cd paas_jelastic_backup
        gunzip haproxy-00-global.cfg.gz
        mv haproxy-00-global.cfg /etc/haproxy/haproxy.cfg.d/00-global.cfg
        sed -ie 's/use_backend proc\(.*\)beg s\(.*\)/use_backend proc\1beg s${nodes.proc.first.id} }/g' /etc/haproxy/haproxy.cfg.d/00-global.cfg
        sudo service haproxy reload
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred while restoring haproxy configuration."

    - cmd [${nodes.bl.first.id}]: |-
        auth_disable=$(grep -e  "#acl tools.*#HTTP_AUTH_BASIC" /etc/haproxy/haproxy.cfg.d/00-global.cfg)
        if [ "$auth_disable" == "" ]; then
          echo true
        else
          echo false
        fi
    - env.control.AddContainerEnvVars[bl]:
      vars: {"auth_basic_enabled": "${response.out}"}
