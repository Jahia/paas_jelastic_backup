---
type: update
version: 1.5
name: Jahia - Restores an environment from a bucket
logo: /images/jahia-logo-70x70.png
id: jahia-restore-from-bucket
baseUrl: https://raw.githubusercontent.com/Jahia/paas_jelastic_backup


onInstall:
  - if(settings.cloud_source):
      - if(settings.region_source):
          - script: |
                var region = '${settings.region_source}'
                return {'result': 0, 'resp': region.replace(/(\W|_)+/g, '')}
          - setGlobals:
                wc_region_source: ${response.resp}
          - if(settings.envrole_source):
              - if(settings.uid_source):
                  - setGlobals:
                      bucketname: jc${settings.envrole_source}${settings.uid_source}${globals.wc_region_source} -F ${settings.cloud_source},${settings.region_source},${settings.envrole_source}

  - if(settings.source_env):
      - envSource
      - setGlobals:
          bucketname: jc${globals.envRole_source}${env.uid}${globals.region_source} -F ${globals.cloudProvider_source},${globals.regionRealName_source},${settings.envrole_source}
  - if(!settings.source_env):
      - if(!settings.envrole_source):
          - setGlobals:
              bucketname: jc${cluster_role}${env.uid}${env_region}

  - cmd [proc,cp]:
      - sudo yum install -y python36 python36-pip
      - python3 -m pip install --upgrade pip
      - python3 -m pip install --upgrade boto3 azure adal
      - if [ ! -d ~/.aws ]; then mkdir ~/.aws; fi
      - echo "[default]" > ~/.aws/credentials
      - echo "aws_access_key_id= ${settings.aws_access_key}" >> ~/.aws/credentials
      - echo "aws_secret_access_key = ${settings.aws_secret_key}" >> ~/.aws/credentials
      - provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export aws_region
      - echo "region=$aws_region" >> ~/.aws/credentials
      - if [ -d paas_jelastic_backup ]; then rm -fr paas_jelastic_backup; fi; git clone ${settings.gitrepo}; cd paas_jelastic_backup; git checkout ${settings.gitbranch}; git checkout tags/${settings.gittag}; echo
      - service tomcat stop
  - cmd [proc,cp]:
      - cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
      - env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
      - cd paas_jelastic_backup
      - python3 backrest.py -a download --backupname ${settings.backup_name} --bucketname ${globals.bucketname} -m ${settings.backtype} -t ${settings.timestamp} -f digital-factory-data.tar.gz
      - rm -rf /data
      - tar xf digital-factory-data.tar.gz -C /
      - chown tomcat:tomcat -R /data
      - rm digital-factory-data.tar.gz
  - cmd [proc,cp]:
      - cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
      - env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
      - cd paas_jelastic_backup
      - python3 backrest.py -a download --backupname ${settings.backup_name} --bucketname ${globals.bucketname} -m ${settings.backtype} -t ${settings.timestamp} -f digital-factory-config.tar.gz
      - rm -rf /opt/tomcat/conf/digital-factory-config
      - tar xf digital-factory-config.tar.gz -C /
      - chown tomcat:tomcat -R /opt/tomcat/conf
      - rm -f digital-factory-config.tar.gz
      - rm -f /data/digital-factory-data/repository/.lock
      - touch /data/digital-factory-data/safe-env-clone
      - chown tomcat:tomcat /data/digital-factory-data/safe-env-clone
      - sed -i "s|^cluster.node.serverId.*|cluster.node.serverId = $HOSTNAME|g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
  - cmd [cp]:
      - sed -i "s|^processingServer.*|processingServer = false|g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
  - cmd [proc]:
      - cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
      - env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
      - cd paas_jelastic_backup
      - python3 backrest.py -a download --backupname ${settings.backup_name} --bucketname ${globals.bucketname} -m ${settings.backtype} -t ${settings.timestamp} -f jahia.sql.gz
      - case ${DB_ENDPOINT} in "mysqldb") mysql_host="mysqldb" ;; "proxy") mysql_host=${PROXYSQL_MASTER_IP} ;; *) mysql_host="mysqldb"; esac
      - gunzip < jahia.sql.gz | mysql -u$DB_USER -p$DB_PASSWORD -h ${mysql_host} --max_allowed_packet=1024M
      - rm -f jahia.sql.gz
  - cmd [proc,cp]: |-
        if [ $(echo $DX_VERSION | sed 's/\.//g') -lt 7320 ]; then  # revisionNode file is set starting 7.3.2.0
          case ${DB_ENDPOINT} in "mysqldb") mysql_host="mysqldb" ;; "proxy") mysql_host=${PROXYSQL_MASTER_IP} ;; *) mysql_host="mysqldb"; esac
          query="mysql -u $DB_USER -p$DB_PASSWORD -h proxysql -e \"select max(revision_id) from JR_J_LOCAL_REVISIONS\""
          opts="-u $DB_USER -p$DB_PASSWORD -h proxysql_2 -e $query jahia"
          ~/paas_jelastic_backup/revisionNode.py -n $(mysql $opts)
        fi
        service tomcat start

actions:
  envSource:
    - script: |
          var envInfo = jelastic.env.control.getenvinfo('${settings.source_env}', session)
          for (var i = 0, n = envInfo.nodes; i < n.length; i++) {
            if (n[i].nodeGroup == 'proc') {
              var nodeID = n[i].id
            }
          }
          var metadata = jelastic.env.file.read('${settings.source_env}', session, '/metadata_from_HOST', null, null, nodeID).body.toString()

          var re = /(\S|\n|\r)*JEL_REGION=(\S+)(\S|\n|\r)*/
          var regionRealName = metadata.replace(re, '$2')
          var region = regionRealName.replace(/(\W|_)+/g, '')

          var re = /(\S|\n|\r)*JEL_CLOUDPROVIDER=(\S+)(\S|\n|\r)*/
          var cloudProvider = metadata.replace(re, '$2')

          var re = /(\S|\n|\r)*JEL_AVAILABILITYZONE=(\S+)(\S|\n|\r)*/
          var az = metadata.replace(re, '$2')

          var re = /(\S|\n|\r)*JEL_ENV_ROLE=(\S+)(\S|\n|\r)*/
          var envRole = metadata.replace(re, '$2')

          return {'result': 0,
            'region': region,
            'regionRealName': regionRealName,
            'cloudProvider': cloudProvider,
            'az': az,
            'envRole': envRole}
    - setGlobals:
        region_source: ${response.region}
        regionRealName_source: ${response.regionRealName}
        cloudProvider_source: ${response.cloudProvider}
        az_source: ${response.az}
        envRole_source: ${response.envRole}


settings:
  fields:
    - name: backup_name
      type: string
      caption: Backup Name
      vtype: text
      required: true
    - name: aws_access_key
      type: string
      caption: AWS Access Key
      vtype: text
      required: true
    - name: aws_secret_key
      type: string
      caption: AWS Secret Key
      vtype: text
      required: true
    - name: source_env
      type: envlist
      caption: backup from ?
      valueField: appid
      editable: true
    - name: cloud_source
      type: string
      caption: cloud source ?
    - name: region_source
      type: string
      caption: region_source ?
    - name: uid_source
      type: string
      caption: uid_source ?
    - name: envrole_source
      type: list
      caption: envrole_source ?
      values:
        dev: dev
        prod: prod
    - name: gitrepo
      caption: backrest git repo url
      type: string
      default: https://github.com/Jahia/paas_jelastic_backup.git
      inputType: hidden
    - name: gitbranch
      caption: git repo branch to use
      default: master
      type: string
      inputType: hidden
    - name: gittag
      caption: git tag branch to use
      default: v1.1
      type: string
      inputType: hidden
    - name: env
      type: string
      required: true
      default: prod
    - name: timestamp
      caption: timestamp in format %Y-%m-%dT%H:%M:00
      required: true
      type: string
    - name: backtype
      caption: is this a manual or auto backup
      type: string
      default: manual
