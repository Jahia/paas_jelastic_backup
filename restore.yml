---
type: update
version: 1.5
name: Jahia - Restores an environment from a bucket
logo: /images/jahia-logo-70x70.png
id: jahia-restore-from-bucket

globals:
  logAction: "Restore"

mixins:
  - mixins/common-backup-actions.yml
  - mixins/elasticsearch.yml

onInstall:
  - if(settings.cloud_source):
      - if(settings.region_source):
          - script: |
                var region = '${settings.region_source}'
                return {'result': 0, 'resp': region.replace(/(\W|_)+/g, '')}
          - setGlobals:
              wc_region_source: ${response.resp}
          - if(settings.envrole_source):
              - if(settings.uid_source):
                  - setGlobals:
                      bucketname: jc${settings.envrole_source}${settings.uid_source}${globals.wc_region_source} -F ${settings.cloud_source},${settings.region_source},${settings.envrole_source}
              - setGlobals:
                  regionRealName_source: ${settings.region_source}
                  cloudProvider_source: ${settings.cloud_source}

  - if(settings.source_env):
      - envSource
      - setGlobals:
          bucketname: jc${globals.envRole_source}${env.uid}${globals.region_source} -F ${globals.cloudProvider_source},${globals.regionRealName_source},${settings.envrole_source}
  - if(!settings.source_env):
      - if(!settings.envrole_source):
          - setGlobals:
              bucketname: jc${cluster_role}${env.uid}${env_region}

  - script: |-
      var url = "${baseUrl}"
      expr_repo = /(Jahia\/.*?\/)/
      expr_branch = /.+\/(.+)\/$/
      repo_url = "https://github.com/" + url.match(expr_repo)[1]
      branch_url = url.match(expr_branch)[1]
      return {"result": 0, "branch": branch_url, "git-repos-url": repo_url}
  - setGlobals:
      branch: ${response.branch}
      git-repos-url: ${response.git-repos-url}

  - if (nodes.proc):  # Jahia
      - installBackupTools: proc,cp
      - restoreJahia
  - else:  # Jcustomer
      - installBackupTools: ${nodes.es.first.id}
      - restoreElasticsearch


actions:
  restoreJahia:
    - cmd [proc,cp]: |-
        ## [${globals.logAction}] - 2/5
        sudo service tomcat stop
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        python3 backrest.py -a download --backupname ${settings.backup_name} --bucketname ${globals.bucketname} -m ${settings.backtype} -t ${settings.timestamp} -f digital-factory-data.tar.gz
        sudo rm -rf /data/digital-factory-data
        sudo chown tomcat:tomcat /data
        tar xf digital-factory-data.tar.gz -C /
        rm digital-factory-data.tar.gz
    - cmd [proc,cp]: |-
        ## [${globals.logAction}] - 3/5
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        python3 backrest.py -a download --backupname ${settings.backup_name} --bucketname ${globals.bucketname} -m ${settings.backtype} -t ${settings.timestamp} -f digital-factory-config.tar.gz
        rm -rf /opt/tomcat/conf/digital-factory-config
        tar xf digital-factory-config.tar.gz -C /
        chown tomcat:tomcat -R /opt/tomcat/conf
        rm -f digital-factory-config.tar.gz
        rm -f /data/digital-factory-data/repository/.lock
        touch /data/digital-factory-data/safe-env-clone
        sed -i "s|^cluster.node.serverId.*|cluster.node.serverId = $HOSTNAME|g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
    - if (settings.removeEnvlink && ${settings.removeEnvlink} == false):
        - log: keep env link
    - else:
        - log: remove env link
        - cmd[proc, cp]: |-
            rm -f /data/digital-factory-data/karaf/etc/org.jahia.modules.marketingfactory.settings-mf.cfg
        - environment.control.ApplyNodeGroupData [proc, cp]:
            data:
              envLink: ""
    - cmd [cp]:
        - sed -i "s|^processingServer.*|processingServer = false|g" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
    - cmd [cp]: |-
          if [ $(echo $DX_VERSION | sed 's/\.//g') -lt 7320 ]; then  # revisionNode file is set starting 7.3.2.0
            case ${DB_ENDPOINT} in "mysqldb") mysql_host="mysqldb" ;; "proxy") mysql_host=${PROXYSQL_MASTER_IP} ;; "galera") mysql_host="galera";; *) mysql_host="mysqldb"; esac
            query="select max(revision_id) from JR_J_LOCAL_REVISIONS\G"
            num=$(mysql -u $DB_USER -p$DB_PASSWORD -h $mysql_host -e "$query" jahia | awk '$1~/revision_id/ {print $2}')
            ~/paas_jelastic_backup/revisionNode.py -n $num
          fi
    - log: "## TEMPORARY FIX FOR RESTORATION: GRANT ALL ON *.* TO JAHIA'S DB USER"
    # Starting with mariadb 10.4, jahia's db user is not longer root on database
    # resulting in the need to connect as 'mysql' user and temporaly grants
    # jahia's db user for is can successfuly import the dump from processing node.
    # see here for more details: https://mariadb.org/authentication-in-mariadb-10-4/
    # next cmd test if connexion is ok with 'mysql'@'localhost':
    #   - if ok, so it's >10.4 and we need temporary grants
    - cmd[${nodes.sqldb.master.id}]: |-
          if (mysql -se 'select 1' > /dev/null 2>&1); then
            mysql -e "GRANT ALL PRIVILEGES ON *.* TO '$DB_USER'@'%'"
          fi
      user: mysql
    - cmd [proc]: |-
        ## [${globals.logAction}] - 4/5
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        python3 backrest.py -a download --backupname ${settings.backup_name} --bucketname ${globals.bucketname} -m ${settings.backtype} -t ${settings.timestamp} -f jahia.sql.gz
        case ${DB_ENDPOINT} in "mysqldb") mysql_host="mysqldb" ;; "proxy") mysql_host=${PROXYSQL_MASTER_IP} ;; "galera") mysql_host="galera";; *) mysql_host="mysqldb"; esac
        gunzip < jahia.sql.gz | mysql -u$DB_USER -p$DB_PASSWORD -h ${mysql_host} --max_allowed_packet=1024M
        rm -f jahia.sql.gz
    - log: "## TEMPORARY FIX FOR RESTORATION: REVOKE ALL ON *.* TO JAHIA'S DB USER"
    - cmd[${nodes.sqldb.master.id}]: |-
          if (mysql -se 'select 1' > /dev/null 2>&1); then
            mysql -e "REVOKE ALL PRIVILEGES ON *.* FROM '$DB_USER'@'%'"
          fi
      user: mysql
    - cmd [proc,cp]: |-
          find /data/digital-factory-data/modules -name "healthcheck-cluster*" -print -delete
    - cmd [proc]: |-
        ## [${globals.logAction}] - 5/5
        sudo service tomcat start
    - log: "## Waiting a bit before starting browsing's tomcat"
    - sleep:
        - milliseconds: 120000
    - cmd [cp]:
        - sudo service tomcat start

  envSource:
    - script: |
          var envInfo = jelastic.env.control.getenvinfo('${settings.source_env}', session)
          for (var i = 0, n = envInfo.nodes; i < n.length; i++) {
            // Uglty trick to handle unomi. NodeId will contain a es Id if there is no proc
            if (n[i].nodeGroup == 'proc') {
              var nodeID = n[i].id;
              break;
            } else if (n[i].nodeGroup == 'es') {
              var nodeID = n[i].id;
            }
          }
          var metadata = jelastic.env.file.read('${settings.source_env}', session, '/metadata_from_HOST', null, null, nodeID).body.toString()

          var re = /(\S|\n|\r)*JEL_REGION=(\S+)(\S|\n|\r)*/
          var regionRealName = metadata.replace(re, '$2')
          var region = regionRealName.replace(/(\W|_)+/g, '')

          var re = /(\S|\n|\r)*JEL_CLOUDPROVIDER=(\S+)(\S|\n|\r)*/
          var cloudProvider = metadata.replace(re, '$2')

          var re = /(\S|\n|\r)*JEL_AVAILABILITYZONE=(\S+)(\S|\n|\r)*/
          var az = metadata.replace(re, '$2')

          var re = /(\S|\n|\r)*JEL_ENV_ROLE=(\S+)(\S|\n|\r)*/
          var envRole = metadata.replace(re, '$2')

          return {'result': 0,
            'region': region,
            'regionRealName': regionRealName,
            'cloudProvider': cloudProvider,
            'az': az,
            'envRole': envRole}
    - setGlobals:
        region_source: ${response.region}
        regionRealName_source: ${response.regionRealName}
        cloudProvider_source: ${response.cloudProvider}
        az_source: ${response.az}
        envRole_source: ${response.envRole}


settings:
  fields:
    - name: backup_name
      type: string
      caption: Backup Name
      vtype: text
      required: true
    - name: aws_access_key
      type: string
      caption: AWS Access Key
      vtype: text
      required: true
    - name: aws_secret_key
      type: string
      caption: AWS Secret Key
      vtype: text
      required: true
    - name: source_env
      type: envlist
      caption: backup from ?
      valueField: appid
      editable: true
    - name: cloud_source
      type: string
      caption: cloud source ?
    - name: region_source
      type: string
      caption: region_source ?
    - name: uid_source
      type: string
      caption: uid_source ?
    - name: envrole_source
      type: list
      caption: envrole_source ?
      values:
        dev: dev
        prod: prod
    - name: env
      type: string
      required: true
      default: prod
    - name: timestamp
      caption: timestamp in format %Y-%m-%dT%H:%M:00
      required: true
      type: string
    - name: backtype
      caption: is this a manual or auto backup
      type: string
      default: manual
    - name: removeEnvlink
      type: radiolist
      caption: Env links
      values:
        true: Remove
        false: Keep
      default: 1
