---
type: update
version: 1.5
name: Jahia - Snapshots an environment and stores it in the appropriate object storage
logo: /images/jahia-logo-70x70.png
id: jahia-backup-to-bucket

globals:
  timestamp: ${settings.timestamp}
  argTimestamp: '-t "${globals.timestamp}"'
  logAction: "${settings.backtype} Backup"
  logsPath: "/var/log/jelastic-packages/backup.log"

mixins:
  - mixins/common-backup-actions.yml
  - mixins/elasticsearch.yml
  - mixins/haproxy.yml

onInstall:
  - script: |-
      var url = "${baseUrl}"
      expr_repo = /(Jahia\/.*?\/)/
      expr_branch = /.+\/(.+)\/$/
      repo_url = "https://github.com/" + url.match(expr_repo)[1]
      branch_url = url.match(expr_branch)[1]
      return {"result": 0, "branch": branch_url, "git-repos-url": repo_url}
  - setGlobals:
      branch: ${response.branch}
      git-repos-url: ${response.git-repos-url}

  - if('${globals.timestamp}' == ''):
      - setTimestamp

  - if (nodes.proc):  # Jahia
      - clearJelasticLogs:
          target: proc
          user: tomcat
      - clearJelasticLogs:
          target: bl
          user: haproxy
      - installBackupTools: proc
      - if (nodes.bl):  # Haproxy
          - installBackupTools: bl
      - backupGalera
      - backupJahia
      - if (nodes.bl):  # Haproxy
          - backupHaproxy
      - addMetadata: proc
      - rotateBackups: proc
  - else:  # Jcustomer
      - clearJelasticLogs:
          target: ${nodes.es.first.id}
          user: root
      - installBackupTools: ${nodes.es.first.id}
      - backupElasticsearch
      - addMetadata: ${nodes.es.first.id}
      - rotateElasticsearchBackup

actions:
  setTimestamp:
    - script: |
          var diso = new Date()
          var m = diso.getMonth() + 1
          var H = diso.getHours()
          var M = diso.getMinutes()
          var d = diso.getDate()
          if(m.toString().length != 2) {m = "0" + m}
          if(H.toString().length != 2) {H = "0" + H}
          if(M.toString().length != 2) {M = "0" + M}
          if(d.toString().length != 2) {d = "0" + d}
          var timestamp = diso.getFullYear() + "-" + m + "-" + d + "T" + H + ":" + M + ":00"
          return {'result': 0, 'timestamp': timestamp}
    - setGlobals:
        timestamp: ${response.timestamp}
        argTimestamp: '-t "${response.timestamp}"'

  backupJahia:
    - cmd [proc]: |-
        ## [${globals.logAction}] - 3/5
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        tar -czf digital-factory-data.tar.gz -C / data/digital-factory-data/ 2>${globals.logsPath} || exit 1
        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f digital-factory-data.tar.gz ${globals.argTimestamp} -m ${settings.backtype} 2>${globals.logsPath} || exit 1
        rm -f digital-factory-data.tar.gz
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during jahia data backup. ${response.errOut}"
    - cmd [proc]: |-
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        tar -czf digital-factory-config.tar.gz -C / opt/tomcat/conf/digital-factory-config/ 2>${globals.logsPath} || exit 1
        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f digital-factory-config.tar.gz ${globals.argTimestamp} -m ${settings.backtype}  2>${globals.logsPath} || exit 1
        rm -f digital-factory-config.tar.gz
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during jahia configuration backup. ${response.errOut}"
    - cmd [proc]: |-
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        grep -e "^jahia_cfg_" /.jelenv > jahia-env-vars 2>${globals.logsPath} || exit 1
        gzip jahia-env-vars 2>${globals.logsPath} || exit 1
        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f jahia-env-vars.gz ${globals.argTimestamp} -m ${settings.backtype} 2>${globals.logsPath} || exit 1
        rm -f jahia-env-vars.gz
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during environment variables backup. ${response.errOut}"

  backupGalera:
    - cmd [proc]: |-
        ## [${globals.logAction}] - 2/5
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        case ${DB_ENDPOINT} in "mysqldb") mysql_host="mysqldb" ;; "proxy") mysql_host=${PROXYSQL_MASTER_IP} ;; "galera") mysql_host="galera";; *) mysql_host="mysqldb"; esac
        mysqldump --hex-blob --user=$DB_USER --password=$DB_PASSWORD -h ${mysql_host} --single-transaction --max_allowed_packet=1024M --quote-names --opt --databases --compress jahia 2>${globals.logsPath} | gzip > jahia.sql.gz
        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f jahia.sql.gz ${globals.argTimestamp} -m ${settings.backtype}  2>${globals.logsPath} || exit 1
        rm -f jahia.sql.gz
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during database backup. ${response.errOut}"


  addMetadata:
    - cmd [${this}]: |-
        ## [${globals.logAction}] - 4/5
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        python3 backrest.py -a addmeta --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} ${globals.argTimestamp} -m ${settings.backtype} --displayname '${env.displayName}' 2>${globals.logsPath} || exit 1
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during backup's metadata definition. ${response.errOut}"

  rotateBackups:
    - cmd [${this}]: |-
        ## [${globals.logAction}] - 5/5
        export AWS_ACCESS_KEY_ID="${settings.aws_access_key}" AWS_SECRET_ACCESS_KEY="${settings.aws_secret_key}"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd paas_jelastic_backup
        python3 backrest.py -a rotate --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} ${globals.argTimestamp} -m ${settings.backtype} -k ${settings.retention} 2>${globals.logsPath} || exit 1
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during backup rotation. ${response.errOut}"

settings:
  fields:
    - name: backup_name
      type: string
      caption: Backup Name
      vtype: text
      required: true
    - name: aws_access_key
      type: string
      caption: AWS Access Key
      vtype: text
      required: true
    - name: aws_secret_key
      type: string
      caption: AWS Secret Key
      vtype: text
      required: true
    - name: gitrepo
    - name: env
      type: string
      required: true
      default: prod
    - name: timestamp
      caption: timestamp in format %Y-%m-%dT%H:%M:00
      required: false
      type: string
    - name: retention
      caption: how many backup do you want to keep
      type: string
      default: 15
    - name: backtype
      caption: is this a manual or auto backup
      type: string
      default: manual
